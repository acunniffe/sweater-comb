openapi: 3.0.3
x-snyk-api-stability: beta
x-snyk-api-version: '2021-06-01'
info:
  title: Registry
  version: 3.0.0
servers:
  - description: Snyk Registry
    url: /api/v3
tags:
  - name: Group Organizations
    description: Group orgs
  - name: Invites
    description: Invites
  - name: Projects
    description: Projects

components:
  headers:
    Location:
      description: A header containing a location of a resource
      schema:
        type: string
    VersionRequestedResponseHeader:
      description:
        A header containing the version of the endpoint requested by the
        caller.
      schema:
        $ref: '#/components/schemas/Version'
    VersionServedResponseHeader:
      description:
        A header containing the version of the endpoint that was served
        by the API.
      schema:
        $ref: '#/components/schemas/Version'
    VersionStageResponseHeader:
      description: |
        A header containing the version stage of the endpoint. This stage describes the guarantees snyk provides surrounding stability of the endpoint.
      schema:
        enum:
          - wip
          - experimental
          - beta
          - ga
          - deprecated
          - sunset
        type: string
    DeprecationHeader:
      description: |
        A header containing the deprecation date of the underlying endpoint. For more information, please refer to the deprecation header RFC:
        https://tools.ietf.org/id/draft-dalal-deprecation-header-01.html
      schema:
        format: date-time
        type: string
    SunsetHeader:
      description: |
        A header containing the date of when the underlying endpoint will be removed. This header is only present if the endpoint has been deprecated. Please refer to the RFC for more information:
        https://datatracker.ietf.org/doc/html/rfc8594
      schema:
        format: date-time
        type: string
    RequestIdResponseHeader:
      description: |
        A header containing a unique id used for tracking this request. If you are reporting an issue to Snyk itâ€™s very helpful to provide this ID.
      schema:
        format: uuid
        type: string
    InternalGlooNormalizedPathHeader:
      description: |
        An internal header used by Snyk's API-Gateway for analytics.
      schema:
        type: string
    InternalGlooOrgIdHeader:
      description: >
        An internal header used by Snyk's API-Gateway for analytics.
      schema:
        type: string
        format: uuid

  parameters:
    Version:
      description: The requested version of the endpoint to process the request
      in: query
      name: version
      required: true
      schema:
        type: string
    EndingBefore:
      description: Return the page of results immediately before this cursor
      in: query
      name: ending_before
      schema:
        type: string
    Limit:
      description: Number of results to return per page
      in: query
      name: limit
      schema:
        default: 10
        format: int32
        maximum: 100
        minimum: 10
        multipleOf: 10
        type: integer
    StartingAfter:
      description: Return the page of results immediately after this cursor
      in: query
      name: starting_after
      schema:
        type: string

  responses:
    '400':
      description:
        'Bad Request: A parameter provided as a part of the request was
        invalid.'
      headers:
        deprecation:
          $ref: '#/components/headers/DeprecationHeader'
        snyk-request-id:
          $ref: '#/components/headers/RequestIdResponseHeader'
        snyk-version-lifecycle-stage:
          $ref: '#/components/headers/VersionStageResponseHeader'
        snyk-version-requested:
          $ref: '#/components/headers/VersionRequestedResponseHeader'
        snyk-version-served:
          $ref: '#/components/headers/VersionServedResponseHeader'
        sunset:
          $ref: '#/components/headers/SunsetHeader'
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/ErrorDocument'
    '401':
      description:
        'Unauthorized: the request requires an authentication token or
        a token with more permissions.'
      headers:
        snyk-request-id:
          $ref: '#/components/headers/RequestIdResponseHeader'
        snyk-version-lifecycle-stage:
          $ref: '#/components/headers/VersionStageResponseHeader'
        snyk-version-requested:
          $ref: '#/components/headers/VersionRequestedResponseHeader'
        snyk-version-served:
          $ref: '#/components/headers/VersionServedResponseHeader'
        deprecation:
          $ref: '#/components/headers/DeprecationHeader'
        sunset:
          $ref: '#/components/headers/SunsetHeader'
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/ErrorDocument'
    '403':
      description: 'Forbidden: The client does not have access rights to the content.'
      headers:
        snyk-request-id:
          $ref: '#/components/headers/RequestIdResponseHeader'
        snyk-version-lifecycle-stage:
          $ref: '#/components/headers/VersionStageResponseHeader'
        snyk-version-requested:
          $ref: '#/components/headers/VersionRequestedResponseHeader'
        snyk-version-served:
          $ref: '#/components/headers/VersionServedResponseHeader'
        deprecation:
          $ref: '#/components/headers/DeprecationHeader'
        sunset:
          $ref: '#/components/headers/SunsetHeader'
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/ErrorDocument'
    '404':
      description: 'Not Found: The resource being operated on could not be found.'
      headers:
        deprecation:
          $ref: '#/components/headers/DeprecationHeader'
        snyk-request-id:
          $ref: '#/components/headers/RequestIdResponseHeader'
        snyk-version-lifecycle-stage:
          $ref: '#/components/headers/VersionStageResponseHeader'
        snyk-version-requested:
          $ref: '#/components/headers/VersionRequestedResponseHeader'
        snyk-version-served:
          $ref: '#/components/headers/VersionServedResponseHeader'
        sunset:
          $ref: '#/components/headers/SunsetHeader'
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/ErrorDocument'
    '500':
      description:
        'Internal Server Error: An error was encountered while attempting
        to process the request.'
      headers:
        deprecation:
          $ref: '#/components/headers/DeprecationHeader'
        snyk-request-id:
          $ref: '#/components/headers/RequestIdResponseHeader'
        snyk-version-lifecycle-stage:
          $ref: '#/components/headers/VersionStageResponseHeader'
        snyk-version-requested:
          $ref: '#/components/headers/VersionRequestedResponseHeader'
        snyk-version-served:
          $ref: '#/components/headers/VersionServedResponseHeader'
        sunset:
          $ref: '#/components/headers/SunsetHeader'
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/ErrorDocument'
  schemas:
    Error:
      additionalProperties: false
      properties:
        detail:
          type: string
        id:
          format: uuid
          type: string
        meta:
          additionalProperties: true
          type: object
        source:
          additionalProperties: false
          properties:
            parameter:
              type: string
            pointer:
              type: string
          type: object
        status:
          type: string
      required:
        - status
        - detail
      type: object

    ErrorDocument:
      additionalProperties: false
      properties:
        errors:
          items:
            $ref: '#/components/schemas/Error'
          minItems: 1
          type: array
        jsonapi:
          $ref: '#/components/schemas/JsonApi'
      required:
        - jsonapi
        - errors
      type: object

    JsonApi:
      additionalProperties: false
      properties:
        version:
          type: string
      required:
        - version
      type: object

    LinkProperty:
      oneOf:
        - type: string
        - additionalProperties: false
          properties:
            href:
              type: string
              example: thing
            meta:
              additionalProperties: true
              type: object
          required:
            - href
            - meta
          type: object

    Links:
      additionalProperties: false
      properties:
        first:
          $ref: '#/components/schemas/LinkProperty'
        last:
          $ref: '#/components/schemas/LinkProperty'
        next:
          $ref: '#/components/schemas/LinkProperty'
        prev:
          $ref: '#/components/schemas/LinkProperty'
        related:
          $ref: '#/components/schemas/LinkProperty'
        self:
          $ref: '#/components/schemas/LinkProperty'
      type: object

    Version:
      pattern: ^(wip|work-in-progress|experimental|beta|(([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9])))$
      type: string

    Relationships:
      type: object
      additionalProperties:
        type: object
        properties:
          data:
            properties:
              type:
                type: string
              id:
                type: string
                format: uuid
              links: { $ref: '#/components/schemas/Links' }
            required: ['type', 'id']
        required: [data]

    Project:
      type: object
      properties:
        type:
          type: string
          description: Content type.
          example: 'projects'
        id:
          type: string
          description: The ID.
          format: uuid
          example: '331ede0a-de94-456f-b788-166caeca58bf'
        attributes:
          type: object
          properties:
            name:
              type: string
              example: My Project
            created:
              type: string
              format: date-time
              description: The date that the project was created on
              example: '2021-05-29T09:50:54.014Z'
            origin:
              type: string
              description: The origin the project was added from
              example: github
            type:
              type: string
              description: The package manager of the project
              example: maven
            status:
              type: string
              description: Describes if a project is currently monitored or it is de-activated
              example: active
            hostname:
              type: string
              nullable: true
              description: The hostname for a CLI project, null if not set
              example: example.com
            targetReference:
              type: string
              nullable: true
              example: name
            businessCriticality:
              type: array
              example:
                - critical
                - high 
              items:
                type: string
            lifecycle:
              type: array
              example:
                - production
                - development
              items:
                type: string
            environment:
              type: array
              example:
                - frontend
                - backend
              items:
                type: string
            tags:
              type: array
              items: { $ref: '#/components/schemas/Tag' }
              example:
                - key: team
                  value: finance
          required: [name, created, origin, type, status]
          additionalProperties: false
        relationships: { $ref: '#/components/schemas/Relationships' }
      required: ['type', 'id', 'attributes']
      additionalProperties: false

    Tag:
      type: object
      properties:
        key:
          type: string
          example: team
        value:
          type: string
          example: finance
      required: [key, value]
      additionalProperties: false

    OrgInvitation:
      type: object
      properties:
        type:
          type: string
        id:
          type: string
          format: uuid
        attributes: { $ref: '#/components/schemas/OrgInvitationAttributes' }
        links: { $ref: '#/components/schemas/Links' }
      required: [type, id, attributes]
      additionalProperties: false

    OrgInvitationAttributes:
      type: object
      properties:
        email:
          description: The email address of the invitee.
          type: string
          example: 'example@email.com'
        isActive:
          description: The active status of the invitation.
          type: boolean
        role:
          description: The role assigned to the invitee on acceptance.
          type: string
          example: 'Developer'
        org:
          description: The organization the invite was created for.
          type: string
          example: 'Example org'
      required: [email, isActive, role, org]
      additionalProperties: false


    Org:
      type: object
      properties:
        type:
          type: string
          description: Content type.
          example: 'projects'
        id:
          type: string
          description: The ID.
          format: uuid
          example: '331ede0a-de94-456f-b788-166caeca58bf'
        attributes:
          type: object
          properties:
            name:
              type: string
              example: My Org
          required: [name]
          additionalProperties: false
      required: ['type', 'id', 'attributes']
      additionalProperties: false

paths:
  # Org tenant with:
  #   get - multiple responses
  #   patch - 200 with only meta (update successful, applied as request PATCHed it).
  #         - (assuming we can patch straight to a collection provided the ID is in the body? Is that a pattern we want to allow?)
  /orgs/{org_id}/projects:
    get:
      description: Get a list of an organization's projects.
      operationId: getOrgsProjects
      tags:
        - Projects
      parameters:
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/StartingAfter'
        - $ref: '#/components/parameters/EndingBefore'
        - $ref: '#/components/parameters/Limit'
        - name: org_id
          in: path
          required: true
          description: The id of the org to return a list of projects
          schema:
            type: string
            format: uuid
        - in: query
          name: name
          description: Return projects that prefix-match the provided name
          schema:
            type: string
        - in: query
          name: origin
          description: Return projects that match the provided origin
          schema:
            type: string
        - in: query
          description: Return projects that match the provided type
          name: type
          schema:
            type: string
        - in: query
          name: status
          description: Return projects that match the provided status
          schema:
            type: string
            enum:
              - active
              - inactive
        - in: query
          name: 'tags'
          description: Return projects that match all provided tags
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              pattern: ^[a-zA-Z0-9_-]+:[a-zA-Z0-9_-]+$
        - in: query
          name: 'business_criticality'
          description: Return projects that have at least 1 option
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum:
                - critical
                - high
                - medium
                - low
        - in: query
          name: 'environment'
          description: Return projects that have at least 1 option
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum:
                - frontend
                - backend
                - internal
                - external
                - mobile
                - saas
                - onprem
                - hosted
                - distributed
        - in: query
          name: 'lifecycle'
          description: Return projects that have at least 1 option
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum:
                - production
                - development
                - sandbox
        - in: query
          description: Return projects that belong to the provided target
          name: target_id
          schema:
            type: string
            format: uuid
      responses:
        '400': { $ref: '#/components/responses/400' }
        '401': { $ref: '#/components/responses/401' }
        '403': { $ref: '#/components/responses/403' }
        '404': { $ref: '#/components/responses/404' }
        '500': { $ref: '#/components/responses/500' }
        '200':
          description: 'A list of projects is returned for the targeted org'
          headers:
            snyk-version-requested:
              $ref: '#/components/headers/VersionRequestedResponseHeader'
            snyk-version-served:
              $ref: '#/components/headers/VersionServedResponseHeader'
            snyk-request-id:
              $ref: '#/components/headers/RequestIdResponseHeader'
            snyk-version-lifecycle-stage:
              $ref: '#/components/headers/VersionStageResponseHeader'
            deprecation:
              $ref: '#/components/headers/DeprecationHeader'
            sunset:
              $ref: '#/components/headers/SunsetHeader'
            x-envoy-to-remove-normalized-request-path:
              $ref: '#/components/headers/InternalGlooNormalizedPathHeader'
            x-envoy-to-remove-org-public-id: { $ref: '#/components/headers/InternalGlooOrgIdHeader' }
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Project' }
                  jsonapi: { $ref: '#/components/schemas/JsonApi' }
                  links: { $ref: '#/components/schemas/Links' }
                required: ['jsonapi', 'data', 'links' ]
                additionalProperties: false

    patch:
      description: Update an organizationâ€™s project.
      operationId: putOrgsProject
      tags:
        - Projects
      parameters:
        - $ref: '#/components/parameters/Version'
        - name: org_id
          in: path
          required: true
          description: The id of the org of the project
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                attributes:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    name:
                      type: string
                  additionalProperties: false
                  required: ['id']
              additionalProperties: false
              required: ['attributes']
      responses:
        '400': { $ref: '#/components/responses/400' }
        '401': { $ref: '#/components/responses/401' }
        '403': { $ref: '#/components/responses/403' }
        '404': { $ref: '#/components/responses/404' }
        '500': { $ref: '#/components/responses/500' }
        '200':
          description: 'A list of projects is returned for the targeted org'
          headers:
            snyk-version-requested:
              $ref: '#/components/headers/VersionRequestedResponseHeader'
            snyk-version-served:
              $ref: '#/components/headers/VersionServedResponseHeader'
            snyk-request-id:
              $ref: '#/components/headers/RequestIdResponseHeader'
            snyk-version-lifecycle-stage:
              $ref: '#/components/headers/VersionStageResponseHeader'
            deprecation:
              $ref: '#/components/headers/DeprecationHeader'
            sunset:
              $ref: '#/components/headers/SunsetHeader'
            x-envoy-to-remove-normalized-request-path:
              $ref: '#/components/headers/InternalGlooNormalizedPathHeader'
            x-envoy-to-remove-org-public-id: { $ref: '#/components/headers/InternalGlooOrgIdHeader' }
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    properties:
                      customField:
                        type: string
                        example: 'I have updated!'
                required: [meta]
                additionalProperties: false

  # Org tenant with:
  #   get - single response
  #   patch - 200 response with data (update successful, server PATCHed things not given in the request)
  #   delete - 200 with only a meta property
  /orgs/{org_id}/projects/{id}:
    get:
      description: Get an organizationâ€™s project.
      operationId: getOrgsProject
      tags:
        - Projects
      parameters:
        - $ref: '#/components/parameters/Version'
        - name: org_id
          in: path
          required: true
          description: The id of the org to return a list of projects
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          required: true
          description: The id of the project to return
          schema:
            type: string
            format: uuid
      responses:
        '400': { $ref: '#/components/responses/400' }
        '401': { $ref: '#/components/responses/401' }
        '403': { $ref: '#/components/responses/403' }
        '404': { $ref: '#/components/responses/404' }
        '500': { $ref: '#/components/responses/500' }
        '200':
          description: 'A list of projects is returned for the targeted org'
          headers:
            snyk-version-requested:
              $ref: '#/components/headers/VersionRequestedResponseHeader'
            snyk-version-served:
              $ref: '#/components/headers/VersionServedResponseHeader'
            snyk-request-id:
              $ref: '#/components/headers/RequestIdResponseHeader'
            snyk-version-lifecycle-stage:
              $ref: '#/components/headers/VersionStageResponseHeader'
            deprecation:
              $ref: '#/components/headers/DeprecationHeader'
            sunset:
              $ref: '#/components/headers/SunsetHeader'
            x-envoy-to-remove-normalized-request-path:
              $ref: '#/components/headers/InternalGlooNormalizedPathHeader'
            x-envoy-to-remove-org-public-id: { $ref: '#/components/headers/InternalGlooOrgIdHeader' }
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Project' }
                  jsonapi: { $ref: '#/components/schemas/JsonApi' }
                required: ['jsonapi', 'data', 'links' ]
                additionalProperties: false

    patch:
      description: Update an organizationâ€™s project, but with ID in the path.
      operationId: patchOrgsProjectId
      tags:
        - Projects
      parameters:
        - $ref: '#/components/parameters/Version'
        - name: org_id
          in: path
          required: true
          description: The id of the org of the project
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          required: true
          description: The id of the project to return
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                attributes:
                  type: object
                  properties:
                    name:
                      type: string
                  additionalProperties: false
              additionalProperties: false
              required: ['attributes']
      responses:
        '400': { $ref: '#/components/responses/400' }
        '401': { $ref: '#/components/responses/401' }
        '403': { $ref: '#/components/responses/403' }
        '404': { $ref: '#/components/responses/404' }
        '500': { $ref: '#/components/responses/500' }
        '200':
          description: 'A list of projects is returned for the targeted org'
          headers:
            snyk-version-requested:
              $ref: '#/components/headers/VersionRequestedResponseHeader'
            snyk-version-served:
              $ref: '#/components/headers/VersionServedResponseHeader'
            snyk-request-id:
              $ref: '#/components/headers/RequestIdResponseHeader'
            snyk-version-lifecycle-stage:
              $ref: '#/components/headers/VersionStageResponseHeader'
            deprecation:
              $ref: '#/components/headers/DeprecationHeader'
            sunset:
              $ref: '#/components/headers/SunsetHeader'
            x-envoy-to-remove-normalized-request-path:
              $ref: '#/components/headers/InternalGlooNormalizedPathHeader'
            x-envoy-to-remove-org-public-id: { $ref: '#/components/headers/InternalGlooOrgIdHeader' }
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Project' }
                  jsonapi: { $ref: '#/components/schemas/JsonApi' }
                required: ['jsonapi', 'data' ]
                additionalProperties: false

    delete:
      description: Delete an organizationâ€™s project.
      operationId: deleteOrgsProject
      tags:
        - Projects
      parameters:
        - $ref: '#/components/parameters/Version'
        - name: org_id
          in: path
          required: true
          description: The id of the org to return a list of projects
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          required: true
          description: The id of the project to delete
          schema:
            type: string
            format: uuid
      responses:
        '400': { $ref: '#/components/responses/400' }
        '401': { $ref: '#/components/responses/401' }
        '404': { $ref: '#/components/responses/404' }
        '500': { $ref: '#/components/responses/500' }
        '200':
          description: 'A list of projects is returned for the targeted org'
          headers:
            snyk-version-requested:
              $ref: '#/components/headers/VersionRequestedResponseHeader'
            snyk-version-served:
              $ref: '#/components/headers/VersionServedResponseHeader'
            snyk-request-id:
              $ref: '#/components/headers/RequestIdResponseHeader'
            snyk-version-lifecycle-stage:
              $ref: '#/components/headers/VersionStageResponseHeader'
            deprecation:
              $ref: '#/components/headers/DeprecationHeader'
            sunset:
              $ref: '#/components/headers/SunsetHeader'
            x-envoy-to-remove-normalized-request-path:
              $ref: '#/components/headers/InternalGlooNormalizedPathHeader'
            x-envoy-to-remove-org-public-id: { $ref: '#/components/headers/InternalGlooOrgIdHeader' }
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    properties:
                      customField:
                        type: string
                        example: 'I have updated!'
                required: [meta]
                additionalProperties: false

  # Org tenant with:
  #   post
  #   patch - 204 no content
  #   delete - 204 no content
  /orgs/{org_id}/invites:
    post:
      description: Invite a user to an organization.
      operationId: inviteUserToOrg
      tags:
        - Invites
      parameters:
        - $ref: '#/components/parameters/Version'
        - name: org_id
          in: path
          required: true
          description: The id of the org the user is being invited to
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The invitee email address.
                role:
                  type: string
                  description: The role public ID that will be granted to to invitee on acceptance.
                  format: uuid
              additionalProperties: false
              required: [email, role]
      responses:
        '400': { $ref: '#/components/responses/400' }
        '401': { $ref: '#/components/responses/401' }
        '404': { $ref: '#/components/responses/404' }
        '500': { $ref: '#/components/responses/500' }
        '201':
          description: A new organization invitation has been created
          headers:
            snyk-version-requested:
              $ref: '#/components/headers/VersionRequestedResponseHeader'
            snyk-version-served:
              $ref: '#/components/headers/VersionServedResponseHeader'
            snyk-request-id:
              $ref: '#/components/headers/RequestIdResponseHeader'
            snyk-version-lifecycle-stage:
              $ref: '#/components/headers/VersionStageResponseHeader'
            deprecation:
              $ref: '#/components/headers/DeprecationHeader'
            sunset:
              $ref: '#/components/headers/SunsetHeader'
            x-envoy-to-remove-normalized-request-path:
              $ref: '#/components/headers/InternalGlooNormalizedPathHeader'
            location:
              $ref: '#/components/headers/Location'
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  jsonapi: { $ref: '#/components/schemas/JsonApi' }
                  data: { $ref: '#/components/schemas/OrgInvitation' }
                required: [jsonapi, data]
                additionalProperties: false
    
    patch:
      description: Update an org invite
      operationId: patchOrgInvite
      tags:
        - Invites
      parameters:
        - $ref: '#/components/parameters/Version'
        - name: org_id
          in: path
          required: true
          description: The id of the org the user is being invited to
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The invitee email address.
                role:
                  type: string
                  description: The role public ID that will be granted to to invitee on acceptance.
                  format: uuid
              additionalProperties: false
              required: [email, role]
      responses:
        '400': { $ref: '#/components/responses/400' }
        '401': { $ref: '#/components/responses/401' }
        '404': { $ref: '#/components/responses/404' }
        '500': { $ref: '#/components/responses/500' }
        '204':
          description: A new organization invitation has been created
          headers:
            snyk-version-requested:
              $ref: '#/components/headers/VersionRequestedResponseHeader'
            snyk-version-served:
              $ref: '#/components/headers/VersionServedResponseHeader'
            snyk-request-id:
              $ref: '#/components/headers/RequestIdResponseHeader'
            snyk-version-lifecycle-stage:
              $ref: '#/components/headers/VersionStageResponseHeader'
            deprecation:
              $ref: '#/components/headers/DeprecationHeader'
            sunset:
              $ref: '#/components/headers/SunsetHeader'
            x-envoy-to-remove-normalized-request-path:
              $ref: '#/components/headers/InternalGlooNormalizedPathHeader'
            location:
              $ref: '#/components/headers/Location'

    delete:
      description: Update an org invite
      operationId: deleteOrgInvite
      tags:
        - Invites
      parameters:
        - $ref: '#/components/parameters/Version'
        - name: org_id
          in: path
          required: true
          description: The id of the org the user is being invited to
          schema:
            type: string
            format: uuid
      responses:
        '400': { $ref: '#/components/responses/400' }
        '401': { $ref: '#/components/responses/401' }
        '404': { $ref: '#/components/responses/404' }
        '500': { $ref: '#/components/responses/500' }
        '204':
          description: A new organization invitation has been created
          headers:
            snyk-version-requested:
              $ref: '#/components/headers/VersionRequestedResponseHeader'
            snyk-version-served:
              $ref: '#/components/headers/VersionServedResponseHeader'
            snyk-request-id:
              $ref: '#/components/headers/RequestIdResponseHeader'
            snyk-version-lifecycle-stage:
              $ref: '#/components/headers/VersionStageResponseHeader'
            deprecation:
              $ref: '#/components/headers/DeprecationHeader'
            sunset:
              $ref: '#/components/headers/SunsetHeader'
            x-envoy-to-remove-normalized-request-path:
              $ref: '#/components/headers/InternalGlooNormalizedPathHeader'
            location:
              $ref: '#/components/headers/Location'

  # Group tenant example
  /groups/{group_id}/orgs:
    get:
      description: Get a list of orgs within a group
      operationId: getIssuesSummary
      tags:
        - Group Organizations
      parameters:
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/StartingAfter'
        - $ref: '#/components/parameters/EndingBefore'
        - $ref: '#/components/parameters/Limit'
        - name: group_id
          in: path
          required: true
          description: The id of the group to return a list of issues for
          schema:
            type: string
            format: uuid
      responses:
        'default':
          $ref: '#/components/responses/400'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
        '200':
          description: A list of orgs is returned
          headers:
            deprecation:
              $ref: '#/components/headers/DeprecationHeader'
            snyk-request-id:
              $ref: '#/components/headers/RequestIdResponseHeader'
            snyk-version-lifecycle-stage:
              $ref: '#/components/headers/VersionStageResponseHeader'
            snyk-version-requested:
              $ref: '#/components/headers/VersionRequestedResponseHeader'
            snyk-version-served:
              $ref: '#/components/headers/VersionServedResponseHeader'
            sunset:
              $ref: '#/components/headers/SunsetHeader'
            x-envoy-to-remove-normalized-request-path:
              $ref: '#/components/headers/InternalGlooNormalizedPathHeader'
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Org'
                  jsonapi: { $ref: '#/components/schemas/JsonApi' }
                  links: { $ref: '#/components/schemas/Links' }
                required: ['jsonapi', 'data', 'links']
