// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`failing case 1: adding a camelCase when pascalCase is required 1`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "header": "exampleParam",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "parameters",
            "header",
            "exampleParam",
          ],
          "jsonPath": "/paths/~1example/get/parameters/0",
          "kind": "header-parameter",
        },
        "value": Object {
          "in": "header",
          "name": "exampleParam",
          "required": false,
        },
      },
      "condition": "have PascalCase name",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "exampleParam is not PascalCase",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "requirement for header-parameter: exampleParam",
    },
  ],
}
`;

exports[`failing case 1: adding a camelCase when pascalCase is required 2`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inResponse": Object {
              "header": "exampleParam",
              "statusCode": "200",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "responses",
            "200",
            "headers",
            "exampleParam",
          ],
          "jsonPath": "/paths/~1example/get/responses/200/headers/exampleParam",
          "kind": "response-header",
        },
        "value": Object {
          "name": "exampleParam",
          "required": false,
        },
      },
      "condition": "have PascalCase name",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "exampleParam is not PascalCase",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "requirement for response-header: exampleParam",
    },
  ],
}
`;

exports[`failing case 1: adding a camelCase when pascalCase is required 3`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "body": Object {
                "contentType": "application/json",
              },
            },
            "jsonSchemaTrail": Array [
              "examplePropertyName",
            ],
            "method": "post",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "post",
            "application/json",
            "examplePropertyName",
          ],
          "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/examplePropertyName",
          "kind": "field",
        },
        "value": Object {
          "flatSchema": Object {
            "type": "string",
          },
          "key": "examplePropertyName",
          "required": false,
        },
      },
      "condition": "have PascalCase name",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "examplePropertyName is not PascalCase",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "requirement for field: request body 'examplePropertyName'",
    },
  ],
}
`;

exports[`failing case 1: adding a camelCase when pascalCase is required 4`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inResponse": Object {
              "body": Object {
                "contentType": "application/json",
              },
              "statusCode": "200",
            },
            "jsonSchemaTrail": Array [
              "examplePropertyName",
            ],
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "responses",
            "200",
            "application/json",
            "examplePropertyName",
          ],
          "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/examplePropertyName",
          "kind": "field",
        },
        "value": Object {
          "flatSchema": Object {
            "type": "string",
          },
          "key": "examplePropertyName",
          "required": false,
        },
      },
      "condition": "have PascalCase name",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "examplePropertyName is not PascalCase",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "requirement for field: response body 'examplePropertyName'",
    },
  ],
}
`;

exports[`failing case 1: adding a camelCase when pascalCase is required 5`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "query": "exampleParam",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "parameters",
            "query",
            "exampleParam",
          ],
          "jsonPath": "/paths/~1example/get/parameters/0",
          "kind": "query-parameter",
        },
        "value": Object {
          "in": "query",
          "name": "exampleParam",
          "required": false,
        },
      },
      "condition": "have PascalCase name",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "exampleParam is not PascalCase",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "requirement for query-parameter: exampleParam",
    },
  ],
}
`;

exports[`failing case 1: adding a required property 1`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "added": Object {
          "flatSchema": Object {
            "type": "string",
          },
          "key": "email",
          "required": true,
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "body": Object {
                "contentType": "application/json",
              },
            },
            "jsonSchemaTrail": Array [
              "email",
            ],
            "method": "post",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "post",
            "application/json",
            "email",
          ],
          "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/email",
          "kind": "field",
        },
      },
      "condition": "not be required",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected request body property to not be required",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "added field: email",
    },
  ],
}
`;

exports[`failing case 1: adding required 1`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "added": Object {
          "in": "query",
          "name": "exampleParam",
          "required": true,
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "query": "exampleParam",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "parameters",
            "query",
            "exampleParam",
          ],
          "jsonPath": "/paths/~1example/get/parameters/0",
          "kind": "query-parameter",
        },
      },
      "condition": "not be allowed",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected added query parameter to not be required",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "added query-parameter: exampleParam",
    },
  ],
}
`;

exports[`failing case 1: changing from optional to required 1`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "changeType": "changed",
        "changed": Object {
          "after": Object {
            "in": "query",
            "name": "exampleParam",
            "required": true,
          },
          "before": Object {
            "in": "query",
            "name": "exampleParam",
            "required": false,
          },
        },
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "query": "exampleParam",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "parameters",
            "query",
            "exampleParam",
          ],
          "jsonPath": "/paths/~1example/get/parameters/0",
          "kind": "query-parameter",
        },
      },
      "condition": "not allow changing from optional to required",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected query parameter to be not be required",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "updated query-parameter: exampleParam",
    },
  ],
}
`;

exports[`failing case 1: changing optional to required 1`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "changeType": "changed",
        "changed": Object {
          "after": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "name",
            "required": true,
          },
          "before": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "name",
            "required": false,
          },
        },
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "body": Object {
                "contentType": "application/json",
              },
            },
            "jsonSchemaTrail": Array [
              "name",
            ],
            "method": "post",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "post",
            "application/json",
            "name",
          ],
          "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/name",
          "kind": "field",
        },
      },
      "condition": "not change from optional to required",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected body property to be optional",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "updated field: name",
    },
  ],
}
`;

exports[`failing case 1: changing required to optional 1`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "changeType": "changed",
        "changed": Object {
          "after": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "name",
            "required": false,
          },
          "before": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "name",
            "required": true,
          },
        },
        "location": Object {
          "conceptualLocation": Object {
            "inResponse": Object {
              "body": Object {
                "contentType": "application/json",
              },
              "statusCode": "200",
            },
            "jsonSchemaTrail": Array [
              "name",
            ],
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "responses",
            "200",
            "application/json",
            "name",
          ],
          "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/name",
          "kind": "field",
        },
      },
      "condition": "not change from required to optional",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected body property to be required",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "updated field: name",
    },
  ],
}
`;

exports[`failing case 1: changing type 1`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "changeType": "changed",
        "changed": Object {
          "after": Object {
            "in": "query",
            "name": "exampleParam",
            "schema": Object {
              "type": "number",
            },
          },
          "before": Object {
            "in": "query",
            "name": "exampleParam",
            "schema": Object {
              "type": "string",
            },
          },
        },
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "query": "exampleParam",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "parameters",
            "query",
            "exampleParam",
          ],
          "jsonPath": "/paths/~1example/get/parameters/0",
          "kind": "query-parameter",
        },
      },
      "condition": "not change the type",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected query parameter to not change type",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "updated query-parameter: exampleParam",
    },
  ],
}
`;

exports[`failing case 1: changing type 2`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "changeType": "changed",
        "changed": Object {
          "after": Object {
            "flatSchema": Object {
              "type": "number",
            },
            "key": "name",
            "required": false,
          },
          "before": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "name",
            "required": false,
          },
        },
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "body": Object {
                "contentType": "application/json",
              },
            },
            "jsonSchemaTrail": Array [
              "name",
            ],
            "method": "post",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "post",
            "application/json",
            "name",
          ],
          "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/name",
          "kind": "field",
        },
      },
      "condition": "not allow changing types",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected property to not change type",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "updated field: name",
    },
  ],
}
`;

exports[`failing case 1: changing type 3`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "changeType": "changed",
        "changed": Object {
          "after": Object {
            "flatSchema": Object {
              "type": "number",
            },
            "key": "name",
            "required": false,
          },
          "before": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "name",
            "required": false,
          },
        },
        "location": Object {
          "conceptualLocation": Object {
            "inResponse": Object {
              "body": Object {
                "contentType": "application/json",
              },
              "statusCode": "200",
            },
            "jsonSchemaTrail": Array [
              "name",
            ],
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "responses",
            "200",
            "application/json",
            "name",
          ],
          "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/name",
          "kind": "field",
        },
      },
      "condition": "not allow changing types",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected property to not change type",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "updated field: name",
    },
  ],
}
`;

exports[`failing case 1: removing operation 1`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "changeType": "removed",
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
          ],
          "jsonPath": "/paths/~1example/get",
          "kind": "operation",
        },
        "removed": Object {
          "before": Object {
            "method": "get",
            "pathPattern": "/example",
          },
        },
      },
      "condition": "not be allowed",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected operation to not be removed",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "removed operation: GET /example",
    },
  ],
}
`;

exports[`failing case 1: removing property 1`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "changeType": "removed",
        "location": Object {
          "conceptualLocation": Object {
            "inResponse": Object {
              "body": Object {
                "contentType": "application/json",
              },
              "statusCode": "200",
            },
            "jsonSchemaTrail": Array [
              "name",
            ],
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "responses",
            "200",
            "application/json",
            "name",
          ],
          "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/name",
          "kind": "field",
        },
        "removed": Object {
          "before": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "name",
            "required": false,
          },
        },
      },
      "condition": "not be allowed",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected response property to not be removed",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "removed field: name",
    },
  ],
}
`;

exports[`failing case 1: removing status code 1`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "changeType": "removed",
        "location": Object {
          "conceptualLocation": Object {
            "inResponse": Object {
              "statusCode": "200",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "responses",
            "200",
          ],
          "jsonPath": "/paths/~1example/get/responses/200",
          "kind": "response",
        },
        "removed": Object {
          "before": Object {
            "description": "",
            "statusCode": "200",
          },
        },
      },
      "condition": "not be allowed",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected response to not be removed",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "removed response: 200",
    },
  ],
}
`;

exports[`failing case 2: adding a camelCase when Capital-Param-Case is required 1`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "header": "exampleParam",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "parameters",
            "header",
            "exampleParam",
          ],
          "jsonPath": "/paths/~1example/get/parameters/0",
          "kind": "header-parameter",
        },
        "value": Object {
          "in": "header",
          "name": "exampleParam",
          "required": false,
        },
      },
      "condition": "have Capital-Param-Case name",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "exampleParam is not Capital-Param-Case",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "requirement for header-parameter: exampleParam",
    },
  ],
}
`;

exports[`passing case 1: adding a camelCase when camelCase is required 1`] = `
Object {
  "passed": true,
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "header": "exampleParam",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "parameters",
            "header",
            "exampleParam",
          ],
          "jsonPath": "/paths/~1example/get/parameters/0",
          "kind": "header-parameter",
        },
        "value": Object {
          "in": "header",
          "name": "exampleParam",
          "required": false,
        },
      },
      "condition": "have camelCase name",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "requirement for header-parameter: exampleParam",
    },
  ],
}
`;

exports[`passing case 1: adding a camelCase when camelCase is required 2`] = `
Object {
  "passed": true,
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inResponse": Object {
              "header": "exampleParam",
              "statusCode": "200",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "responses",
            "200",
            "headers",
            "exampleParam",
          ],
          "jsonPath": "/paths/~1example/get/responses/200/headers/exampleParam",
          "kind": "response-header",
        },
        "value": Object {
          "name": "exampleParam",
          "required": false,
        },
      },
      "condition": "have camelCase name",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "requirement for response-header: exampleParam",
    },
  ],
}
`;

exports[`passing case 1: adding a camelCase when camelCase is required 3`] = `
Object {
  "passed": true,
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "body": Object {
                "contentType": "application/json",
              },
            },
            "jsonSchemaTrail": Array [
              "camelCase",
            ],
            "method": "post",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "post",
            "application/json",
            "camelCase",
          ],
          "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/camelCase",
          "kind": "field",
        },
        "value": Object {
          "flatSchema": Object {
            "type": "string",
          },
          "key": "camelCase",
          "required": false,
        },
      },
      "condition": "have camelCase name",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "requirement for field: request body 'camelCase'",
    },
  ],
}
`;

exports[`passing case 1: adding a camelCase when camelCase is required 4`] = `
Object {
  "passed": true,
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inResponse": Object {
              "body": Object {
                "contentType": "application/json",
              },
              "statusCode": "200",
            },
            "jsonSchemaTrail": Array [
              "camelCase",
            ],
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "responses",
            "200",
            "application/json",
            "camelCase",
          ],
          "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/camelCase",
          "kind": "field",
        },
        "value": Object {
          "flatSchema": Object {
            "type": "string",
          },
          "key": "camelCase",
          "required": false,
        },
      },
      "condition": "have camelCase name",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "requirement for field: response body 'camelCase'",
    },
  ],
}
`;

exports[`passing case 1: adding a camelCase when camelCase is required 5`] = `
Object {
  "passed": true,
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "query": "exampleParam",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "parameters",
            "query",
            "exampleParam",
          ],
          "jsonPath": "/paths/~1example/get/parameters/0",
          "kind": "query-parameter",
        },
        "value": Object {
          "in": "query",
          "name": "exampleParam",
          "required": false,
        },
      },
      "condition": "have camelCase name",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "requirement for query-parameter: exampleParam",
    },
  ],
}
`;

exports[`passing case 1: adding an optional property 1`] = `
Object {
  "passed": true,
  "results": Array [
    Object {
      "change": Object {
        "added": Object {
          "flatSchema": Object {
            "type": "string",
          },
          "key": "email",
          "required": false,
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "body": Object {
                "contentType": "application/json",
              },
            },
            "jsonSchemaTrail": Array [
              "email",
            ],
            "method": "post",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "post",
            "application/json",
            "email",
          ],
          "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/email",
          "kind": "field",
        },
      },
      "condition": "not be required",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "added field: email",
    },
  ],
}
`;

exports[`passing case 1: adding optional 1`] = `
Object {
  "passed": true,
  "results": Array [
    Object {
      "change": Object {
        "added": Object {
          "in": "query",
          "name": "exampleParam",
          "required": false,
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "query": "exampleParam",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "parameters",
            "query",
            "exampleParam",
          ],
          "jsonPath": "/paths/~1example/get/parameters/0",
          "kind": "query-parameter",
        },
      },
      "condition": "not be allowed",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "added query-parameter: exampleParam",
    },
  ],
}
`;

exports[`passing case 1: changing optional to required 1`] = `
Object {
  "passed": true,
  "results": Array [
    Object {
      "change": Object {
        "changeType": "changed",
        "changed": Object {
          "after": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "name",
            "required": true,
          },
          "before": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "name",
            "required": false,
          },
        },
        "location": Object {
          "conceptualLocation": Object {
            "inResponse": Object {
              "body": Object {
                "contentType": "application/json",
              },
              "statusCode": "200",
            },
            "jsonSchemaTrail": Array [
              "name",
            ],
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "responses",
            "200",
            "application/json",
            "name",
          ],
          "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/name",
          "kind": "field",
        },
      },
      "condition": "not change from required to optional",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "updated field: name",
    },
  ],
}
`;

exports[`passing case 1: changing required to optional 1`] = `
Object {
  "passed": true,
  "results": Array [
    Object {
      "change": Object {
        "changeType": "changed",
        "changed": Object {
          "after": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "name",
            "required": false,
          },
          "before": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "name",
            "required": true,
          },
        },
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "body": Object {
                "contentType": "application/json",
              },
            },
            "jsonSchemaTrail": Array [
              "name",
            ],
            "method": "post",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "post",
            "application/json",
            "name",
          ],
          "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/name",
          "kind": "field",
        },
      },
      "condition": "not change from optional to required",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "updated field: name",
    },
  ],
}
`;

exports[`passing case 2: wrong case ok if it is already there 1`] = `
Object {
  "passed": true,
  "results": Array [],
}
`;

exports[`passing case 2: wrong case ok if it is already there 2`] = `
Object {
  "passed": true,
  "results": Array [],
}
`;

exports[`passing case 2: wrong case ok if it is already there 3`] = `
Object {
  "passed": true,
  "results": Array [],
}
`;

exports[`passing case 2: wrong case ok if it is already there 4`] = `
Object {
  "passed": true,
  "results": Array [],
}
`;

exports[`passing case 2: wrong case ok if it is already there 5`] = `
Object {
  "passed": true,
  "results": Array [],
}
`;

exports[`passing case 3: adding a Capital-Param-Case when Capital-Param-Case is required 1`] = `
Object {
  "passed": true,
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "header": "Example-Header",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "parameters",
            "header",
            "Example-Header",
          ],
          "jsonPath": "/paths/~1example/get/parameters/0",
          "kind": "header-parameter",
        },
        "value": Object {
          "in": "header",
          "name": "Example-Header",
          "required": false,
        },
      },
      "condition": "have Capital-Param-Case name",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "requirement for header-parameter: Example-Header",
    },
  ],
}
`;

exports[`passing case 4: wrong case ok if it is already there 1`] = `
Object {
  "passed": true,
  "results": Array [],
}
`;

exports[`workflow templates operations create creates a valid spec 1`] = `
Array [
  Object {
    "change": Object {
      "added": Object {
        "description": "Create a new user",
        "method": "post",
        "operationId": "createUser",
        "pathPattern": "/orgs/{org_id}/users/{user_id}",
        "summary": "Create a new user",
        "tags": Array [
          "User",
        ],
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post",
        "kind": "operation",
      },
    },
    "condition": "have the correct operationId format",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#operation-ids",
    "effectiveOnDate": 2021-07-01T00:00:00.000Z,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added operation: POST /orgs/{org_id}/users/{user_id}",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post",
        "kind": "operation",
      },
      "value": Object {
        "description": "Create a new user",
        "method": "post",
        "operationId": "createUser",
        "pathPattern": "/orgs/{org_id}/users/{user_id}",
        "summary": "Create a new user",
        "tags": Array [
          "User",
        ],
      },
    },
    "condition": "have operationId",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#operation-ids",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for operation: POST /orgs/{org_id}/users/{user_id}",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post",
        "kind": "operation",
      },
      "value": Object {
        "description": "Create a new user",
        "method": "post",
        "operationId": "createUser",
        "pathPattern": "/orgs/{org_id}/users/{user_id}",
        "summary": "Create a new user",
        "tags": Array [
          "User",
        ],
      },
    },
    "condition": "have tags",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#tags",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for operation: POST /orgs/{org_id}/users/{user_id}",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post",
        "kind": "operation",
      },
      "value": Object {
        "description": "Create a new user",
        "method": "post",
        "operationId": "createUser",
        "pathPattern": "/orgs/{org_id}/users/{user_id}",
        "summary": "Create a new user",
        "tags": Array [
          "User",
        ],
      },
    },
    "condition": "have a summary",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#operation-summary",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for operation: POST /orgs/{org_id}/users/{user_id}",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Create a new user",
        "method": "post",
        "operationId": "createUser",
        "pathPattern": "/orgs/{org_id}/users/{user_id}",
        "summary": "Create a new user",
        "tags": Array [
          "User",
        ],
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post",
        "kind": "operation",
      },
    },
    "condition": "use the correct case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#parameter-names-and-path-components",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added operation: POST /orgs/{org_id}/users/{user_id}",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Create a new user",
        "method": "post",
        "operationId": "createUser",
        "pathPattern": "/orgs/{org_id}/users/{user_id}",
        "summary": "Create a new user",
        "tags": Array [
          "User",
        ],
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post",
        "kind": "operation",
      },
    },
    "condition": "not use put method",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added operation: POST /orgs/{org_id}/users/{user_id}",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post",
        "kind": "operation",
      },
      "value": Object {
        "description": "Create a new user",
        "method": "post",
        "operationId": "createUser",
        "pathPattern": "/orgs/{org_id}/users/{user_id}",
        "summary": "Create a new user",
        "tags": Array [
          "User",
        ],
      },
    },
    "condition": "include a version parameter",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/version.md#how-are-versions-accessed-and-resolved-by-consumers",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for operation: POST /orgs/{org_id}/users/{user_id}",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post",
        "kind": "operation",
      },
      "value": Object {
        "description": "Create a new user",
        "method": "post",
        "operationId": "createUser",
        "pathPattern": "/orgs/{org_id}/users/{user_id}",
        "summary": "Create a new user",
        "tags": Array [
          "User",
        ],
      },
    },
    "condition": "use UUID for org_id or group_id",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#organization-and-group-tenants-for-resources",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for operation: POST /orgs/{org_id}/users/{user_id}",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Create a new user",
        "method": "post",
        "operationId": "createUser",
        "pathPattern": "/orgs/{org_id}/users/{user_id}",
        "summary": "Create a new user",
        "tags": Array [
          "User",
        ],
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post",
        "kind": "operation",
      },
    },
    "condition": "have an org or group tenant",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#organization-and-group-tenants-for-resources",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added operation: POST /orgs/{org_id}/users/{user_id}",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "",
          "path": "This Specification",
        },
        "conceptualPath": Array [],
        "jsonPath": "/",
        "kind": "API",
      },
    },
    "condition": "use the right casing for path elements",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#parameter-names-and-path-components",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "this specification: ",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "The requested version of the endpoint to process the request",
        "example": "2021-06-04",
        "in": "query",
        "name": "version",
        "required": true,
        "schema": Object {
          "description": "Requested API version",
          "pattern": "^(wip|work-in-progress|experimental|beta|((([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9]))(~(wip|work-in-progress|experimental|beta))?))$",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "query": "version",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "parameters",
          "query",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/parameters/1",
        "kind": "query-parameter",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added query-parameter: version",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing the version of the endpoint requested by the caller.",
        "example": "2021-06-04",
        "name": "snyk-version-requested",
        "schema": Object {
          "description": "Requested API version",
          "pattern": "^(wip|work-in-progress|experimental|beta|((([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9]))(~(wip|work-in-progress|experimental|beta))?))$",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-requested",
            "statusCode": "201",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "201",
          "headers",
          "snyk-version-requested",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/201/headers/snyk-version-requested",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: snyk-version-requested",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing the version of the endpoint that was served by the API.",
        "example": "2021-06-04",
        "name": "snyk-version-served",
        "schema": Object {
          "description": "Resolved API version",
          "pattern": "^((([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9]))(~(wip|work-in-progress|experimental|beta))?)$",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-served",
            "statusCode": "201",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "201",
          "headers",
          "snyk-version-served",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/201/headers/snyk-version-served",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: snyk-version-served",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing a unique id used for tracking this request. If you are reporting an issue to Snyk it's very helpful to provide this ID.
",
        "example": "4b58e274-ec62-4fab-917b-1d2c48d6bdef",
        "name": "snyk-request-id",
        "schema": Object {
          "format": "uuid",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-request-id",
            "statusCode": "201",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "201",
          "headers",
          "snyk-request-id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/201/headers/snyk-request-id",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: snyk-request-id",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing the version stage of the endpoint. This stage describes the guarantees snyk provides surrounding stability of the endpoint.
",
        "name": "snyk-version-lifecycle-stage",
        "schema": Object {
          "enum": Array [
            "wip",
            "experimental",
            "beta",
            "ga",
            "deprecated",
            "sunset",
          ],
          "example": "ga",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-lifecycle-stage",
            "statusCode": "201",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "201",
          "headers",
          "snyk-version-lifecycle-stage",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/201/headers/snyk-version-lifecycle-stage",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: snyk-version-lifecycle-stage",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing the deprecation date of the underlying endpoint. For more information, please refer to the deprecation header RFC:
https://tools.ietf.org/id/draft-dalal-deprecation-header-01.html
",
        "example": "2021-07-01T00:00:00Z",
        "name": "deprecation",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "deprecation",
            "statusCode": "201",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "201",
          "headers",
          "deprecation",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/201/headers/deprecation",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: deprecation",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing the date of when the underlying endpoint will be removed. This header is only present if the endpoint has been deprecated. Please refer to the RFC for more information:
https://datatracker.ietf.org/doc/html/rfc8594
",
        "example": "2021-08-02T00:00:00Z",
        "name": "sunset",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "sunset",
            "statusCode": "201",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "201",
          "headers",
          "sunset",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/201/headers/sunset",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: sunset",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header providing a URL for the location of a resource
",
        "example": "https://example.com/resource/4",
        "name": "location",
        "schema": Object {
          "format": "url",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "location",
            "statusCode": "201",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "201",
          "headers",
          "location",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/201/headers/location",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: location",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing the version of the endpoint requested by the caller.",
        "example": "2021-06-04",
        "name": "snyk-version-requested",
        "schema": Object {
          "description": "Requested API version",
          "pattern": "^(wip|work-in-progress|experimental|beta|((([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9]))(~(wip|work-in-progress|experimental|beta))?))$",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-requested",
            "statusCode": "400",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "headers",
          "snyk-version-requested",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/headers/snyk-version-requested",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: snyk-version-requested",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing the version of the endpoint that was served by the API.",
        "example": "2021-06-04",
        "name": "snyk-version-served",
        "schema": Object {
          "description": "Resolved API version",
          "pattern": "^((([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9]))(~(wip|work-in-progress|experimental|beta))?)$",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-served",
            "statusCode": "400",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "headers",
          "snyk-version-served",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/headers/snyk-version-served",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: snyk-version-served",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing a unique id used for tracking this request. If you are reporting an issue to Snyk it's very helpful to provide this ID.
",
        "example": "4b58e274-ec62-4fab-917b-1d2c48d6bdef",
        "name": "snyk-request-id",
        "schema": Object {
          "format": "uuid",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-request-id",
            "statusCode": "400",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "headers",
          "snyk-request-id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/headers/snyk-request-id",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: snyk-request-id",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing the version stage of the endpoint. This stage describes the guarantees snyk provides surrounding stability of the endpoint.
",
        "name": "snyk-version-lifecycle-stage",
        "schema": Object {
          "enum": Array [
            "wip",
            "experimental",
            "beta",
            "ga",
            "deprecated",
            "sunset",
          ],
          "example": "ga",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-lifecycle-stage",
            "statusCode": "400",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "headers",
          "snyk-version-lifecycle-stage",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/headers/snyk-version-lifecycle-stage",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: snyk-version-lifecycle-stage",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing the deprecation date of the underlying endpoint. For more information, please refer to the deprecation header RFC:
https://tools.ietf.org/id/draft-dalal-deprecation-header-01.html
",
        "example": "2021-07-01T00:00:00Z",
        "name": "deprecation",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "deprecation",
            "statusCode": "400",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "headers",
          "deprecation",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/headers/deprecation",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: deprecation",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing the date of when the underlying endpoint will be removed. This header is only present if the endpoint has been deprecated. Please refer to the RFC for more information:
https://datatracker.ietf.org/doc/html/rfc8594
",
        "example": "2021-08-02T00:00:00Z",
        "name": "sunset",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "sunset",
            "statusCode": "400",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "headers",
          "sunset",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/headers/sunset",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: sunset",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing the version of the endpoint requested by the caller.",
        "example": "2021-06-04",
        "name": "snyk-version-requested",
        "schema": Object {
          "description": "Requested API version",
          "pattern": "^(wip|work-in-progress|experimental|beta|((([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9]))(~(wip|work-in-progress|experimental|beta))?))$",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-requested",
            "statusCode": "401",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "headers",
          "snyk-version-requested",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/headers/snyk-version-requested",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: snyk-version-requested",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing the version of the endpoint that was served by the API.",
        "example": "2021-06-04",
        "name": "snyk-version-served",
        "schema": Object {
          "description": "Resolved API version",
          "pattern": "^((([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9]))(~(wip|work-in-progress|experimental|beta))?)$",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-served",
            "statusCode": "401",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "headers",
          "snyk-version-served",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/headers/snyk-version-served",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: snyk-version-served",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing a unique id used for tracking this request. If you are reporting an issue to Snyk it's very helpful to provide this ID.
",
        "example": "4b58e274-ec62-4fab-917b-1d2c48d6bdef",
        "name": "snyk-request-id",
        "schema": Object {
          "format": "uuid",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-request-id",
            "statusCode": "401",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "headers",
          "snyk-request-id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/headers/snyk-request-id",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: snyk-request-id",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing the version stage of the endpoint. This stage describes the guarantees snyk provides surrounding stability of the endpoint.
",
        "name": "snyk-version-lifecycle-stage",
        "schema": Object {
          "enum": Array [
            "wip",
            "experimental",
            "beta",
            "ga",
            "deprecated",
            "sunset",
          ],
          "example": "ga",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-lifecycle-stage",
            "statusCode": "401",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "headers",
          "snyk-version-lifecycle-stage",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/headers/snyk-version-lifecycle-stage",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: snyk-version-lifecycle-stage",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing the deprecation date of the underlying endpoint. For more information, please refer to the deprecation header RFC:
https://tools.ietf.org/id/draft-dalal-deprecation-header-01.html
",
        "example": "2021-07-01T00:00:00Z",
        "name": "deprecation",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "deprecation",
            "statusCode": "401",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "headers",
          "deprecation",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/headers/deprecation",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: deprecation",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing the date of when the underlying endpoint will be removed. This header is only present if the endpoint has been deprecated. Please refer to the RFC for more information:
https://datatracker.ietf.org/doc/html/rfc8594
",
        "example": "2021-08-02T00:00:00Z",
        "name": "sunset",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "sunset",
            "statusCode": "401",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "headers",
          "sunset",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/headers/sunset",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: sunset",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing the version of the endpoint requested by the caller.",
        "example": "2021-06-04",
        "name": "snyk-version-requested",
        "schema": Object {
          "description": "Requested API version",
          "pattern": "^(wip|work-in-progress|experimental|beta|((([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9]))(~(wip|work-in-progress|experimental|beta))?))$",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-requested",
            "statusCode": "403",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "headers",
          "snyk-version-requested",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/headers/snyk-version-requested",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: snyk-version-requested",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing the version of the endpoint that was served by the API.",
        "example": "2021-06-04",
        "name": "snyk-version-served",
        "schema": Object {
          "description": "Resolved API version",
          "pattern": "^((([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9]))(~(wip|work-in-progress|experimental|beta))?)$",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-served",
            "statusCode": "403",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "headers",
          "snyk-version-served",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/headers/snyk-version-served",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: snyk-version-served",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing a unique id used for tracking this request. If you are reporting an issue to Snyk it's very helpful to provide this ID.
",
        "example": "4b58e274-ec62-4fab-917b-1d2c48d6bdef",
        "name": "snyk-request-id",
        "schema": Object {
          "format": "uuid",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-request-id",
            "statusCode": "403",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "headers",
          "snyk-request-id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/headers/snyk-request-id",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: snyk-request-id",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing the version stage of the endpoint. This stage describes the guarantees snyk provides surrounding stability of the endpoint.
",
        "name": "snyk-version-lifecycle-stage",
        "schema": Object {
          "enum": Array [
            "wip",
            "experimental",
            "beta",
            "ga",
            "deprecated",
            "sunset",
          ],
          "example": "ga",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-lifecycle-stage",
            "statusCode": "403",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "headers",
          "snyk-version-lifecycle-stage",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/headers/snyk-version-lifecycle-stage",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: snyk-version-lifecycle-stage",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing the deprecation date of the underlying endpoint. For more information, please refer to the deprecation header RFC:
https://tools.ietf.org/id/draft-dalal-deprecation-header-01.html
",
        "example": "2021-07-01T00:00:00Z",
        "name": "deprecation",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "deprecation",
            "statusCode": "403",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "headers",
          "deprecation",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/headers/deprecation",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: deprecation",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing the date of when the underlying endpoint will be removed. This header is only present if the endpoint has been deprecated. Please refer to the RFC for more information:
https://datatracker.ietf.org/doc/html/rfc8594
",
        "example": "2021-08-02T00:00:00Z",
        "name": "sunset",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "sunset",
            "statusCode": "403",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "headers",
          "sunset",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/headers/sunset",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: sunset",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing the version of the endpoint requested by the caller.",
        "example": "2021-06-04",
        "name": "snyk-version-requested",
        "schema": Object {
          "description": "Requested API version",
          "pattern": "^(wip|work-in-progress|experimental|beta|((([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9]))(~(wip|work-in-progress|experimental|beta))?))$",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-requested",
            "statusCode": "404",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "headers",
          "snyk-version-requested",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/headers/snyk-version-requested",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: snyk-version-requested",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing the version of the endpoint that was served by the API.",
        "example": "2021-06-04",
        "name": "snyk-version-served",
        "schema": Object {
          "description": "Resolved API version",
          "pattern": "^((([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9]))(~(wip|work-in-progress|experimental|beta))?)$",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-served",
            "statusCode": "404",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "headers",
          "snyk-version-served",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/headers/snyk-version-served",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: snyk-version-served",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing a unique id used for tracking this request. If you are reporting an issue to Snyk it's very helpful to provide this ID.
",
        "example": "4b58e274-ec62-4fab-917b-1d2c48d6bdef",
        "name": "snyk-request-id",
        "schema": Object {
          "format": "uuid",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-request-id",
            "statusCode": "404",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "headers",
          "snyk-request-id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/headers/snyk-request-id",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: snyk-request-id",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing the version stage of the endpoint. This stage describes the guarantees snyk provides surrounding stability of the endpoint.
",
        "name": "snyk-version-lifecycle-stage",
        "schema": Object {
          "enum": Array [
            "wip",
            "experimental",
            "beta",
            "ga",
            "deprecated",
            "sunset",
          ],
          "example": "ga",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-lifecycle-stage",
            "statusCode": "404",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "headers",
          "snyk-version-lifecycle-stage",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/headers/snyk-version-lifecycle-stage",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: snyk-version-lifecycle-stage",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing the deprecation date of the underlying endpoint. For more information, please refer to the deprecation header RFC:
https://tools.ietf.org/id/draft-dalal-deprecation-header-01.html
",
        "example": "2021-07-01T00:00:00Z",
        "name": "deprecation",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "deprecation",
            "statusCode": "404",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "headers",
          "deprecation",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/headers/deprecation",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: deprecation",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing the date of when the underlying endpoint will be removed. This header is only present if the endpoint has been deprecated. Please refer to the RFC for more information:
https://datatracker.ietf.org/doc/html/rfc8594
",
        "example": "2021-08-02T00:00:00Z",
        "name": "sunset",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "sunset",
            "statusCode": "404",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "headers",
          "sunset",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/headers/sunset",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: sunset",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing the version of the endpoint requested by the caller.",
        "example": "2021-06-04",
        "name": "snyk-version-requested",
        "schema": Object {
          "description": "Requested API version",
          "pattern": "^(wip|work-in-progress|experimental|beta|((([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9]))(~(wip|work-in-progress|experimental|beta))?))$",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-requested",
            "statusCode": "409",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "headers",
          "snyk-version-requested",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/headers/snyk-version-requested",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: snyk-version-requested",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing the version of the endpoint that was served by the API.",
        "example": "2021-06-04",
        "name": "snyk-version-served",
        "schema": Object {
          "description": "Resolved API version",
          "pattern": "^((([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9]))(~(wip|work-in-progress|experimental|beta))?)$",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-served",
            "statusCode": "409",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "headers",
          "snyk-version-served",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/headers/snyk-version-served",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: snyk-version-served",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing a unique id used for tracking this request. If you are reporting an issue to Snyk it's very helpful to provide this ID.
",
        "example": "4b58e274-ec62-4fab-917b-1d2c48d6bdef",
        "name": "snyk-request-id",
        "schema": Object {
          "format": "uuid",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-request-id",
            "statusCode": "409",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "headers",
          "snyk-request-id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/headers/snyk-request-id",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: snyk-request-id",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing the version stage of the endpoint. This stage describes the guarantees snyk provides surrounding stability of the endpoint.
",
        "name": "snyk-version-lifecycle-stage",
        "schema": Object {
          "enum": Array [
            "wip",
            "experimental",
            "beta",
            "ga",
            "deprecated",
            "sunset",
          ],
          "example": "ga",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-lifecycle-stage",
            "statusCode": "409",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "headers",
          "snyk-version-lifecycle-stage",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/headers/snyk-version-lifecycle-stage",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: snyk-version-lifecycle-stage",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing the deprecation date of the underlying endpoint. For more information, please refer to the deprecation header RFC:
https://tools.ietf.org/id/draft-dalal-deprecation-header-01.html
",
        "example": "2021-07-01T00:00:00Z",
        "name": "deprecation",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "deprecation",
            "statusCode": "409",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "headers",
          "deprecation",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/headers/deprecation",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: deprecation",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing the date of when the underlying endpoint will be removed. This header is only present if the endpoint has been deprecated. Please refer to the RFC for more information:
https://datatracker.ietf.org/doc/html/rfc8594
",
        "example": "2021-08-02T00:00:00Z",
        "name": "sunset",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "sunset",
            "statusCode": "409",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "headers",
          "sunset",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/headers/sunset",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: sunset",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing the version of the endpoint requested by the caller.",
        "example": "2021-06-04",
        "name": "snyk-version-requested",
        "schema": Object {
          "description": "Requested API version",
          "pattern": "^(wip|work-in-progress|experimental|beta|((([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9]))(~(wip|work-in-progress|experimental|beta))?))$",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-requested",
            "statusCode": "500",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "headers",
          "snyk-version-requested",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/headers/snyk-version-requested",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: snyk-version-requested",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing the version of the endpoint that was served by the API.",
        "example": "2021-06-04",
        "name": "snyk-version-served",
        "schema": Object {
          "description": "Resolved API version",
          "pattern": "^((([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9]))(~(wip|work-in-progress|experimental|beta))?)$",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-served",
            "statusCode": "500",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "headers",
          "snyk-version-served",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/headers/snyk-version-served",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: snyk-version-served",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing a unique id used for tracking this request. If you are reporting an issue to Snyk it's very helpful to provide this ID.
",
        "example": "4b58e274-ec62-4fab-917b-1d2c48d6bdef",
        "name": "snyk-request-id",
        "schema": Object {
          "format": "uuid",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-request-id",
            "statusCode": "500",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "headers",
          "snyk-request-id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/headers/snyk-request-id",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: snyk-request-id",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing the version stage of the endpoint. This stage describes the guarantees snyk provides surrounding stability of the endpoint.
",
        "name": "snyk-version-lifecycle-stage",
        "schema": Object {
          "enum": Array [
            "wip",
            "experimental",
            "beta",
            "ga",
            "deprecated",
            "sunset",
          ],
          "example": "ga",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "snyk-version-lifecycle-stage",
            "statusCode": "500",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "headers",
          "snyk-version-lifecycle-stage",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/headers/snyk-version-lifecycle-stage",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: snyk-version-lifecycle-stage",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing the deprecation date of the underlying endpoint. For more information, please refer to the deprecation header RFC:
https://tools.ietf.org/id/draft-dalal-deprecation-header-01.html
",
        "example": "2021-07-01T00:00:00Z",
        "name": "deprecation",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "deprecation",
            "statusCode": "500",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "headers",
          "deprecation",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/headers/deprecation",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: deprecation",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "A header containing the date of when the underlying endpoint will be removed. This header is only present if the endpoint has been deprecated. Please refer to the RFC for more information:
https://datatracker.ietf.org/doc/html/rfc8594
",
        "example": "2021-08-02T00:00:00Z",
        "name": "sunset",
        "schema": Object {
          "format": "date-time",
          "type": "string",
        },
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "header": "sunset",
            "statusCode": "500",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "headers",
          "sunset",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/headers/sunset",
        "kind": "response-header",
      },
    },
    "condition": "be kebab-case",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#header-field-names",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response-header: sunset",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "201",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "201",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/201",
        "kind": "response",
      },
      "value": Object {
        "description": "Created user successfully",
        "statusCode": "201",
      },
    },
    "condition": "have all headers",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/version.md#versioning-response-headers",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for response: 201",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "400",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400",
        "kind": "response",
      },
      "value": Object {
        "description": "Bad Request: A parameter provided as a part of the request was invalid.",
        "statusCode": "400",
      },
    },
    "condition": "have all headers",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/version.md#versioning-response-headers",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for response: 400",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "401",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401",
        "kind": "response",
      },
      "value": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": "401",
      },
    },
    "condition": "have all headers",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/version.md#versioning-response-headers",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for response: 401",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "403",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403",
        "kind": "response",
      },
      "value": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": "403",
      },
    },
    "condition": "have all headers",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/version.md#versioning-response-headers",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for response: 403",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "404",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404",
        "kind": "response",
      },
      "value": Object {
        "description": "Not Found: The resource being operated on could not be found.",
        "statusCode": "404",
      },
    },
    "condition": "have all headers",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/version.md#versioning-response-headers",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for response: 404",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "409",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409",
        "kind": "response",
      },
      "value": Object {
        "description": "Conflict: The requested operation conflicts with the current state of the resource in some way.",
        "statusCode": "409",
      },
    },
    "condition": "have all headers",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/version.md#versioning-response-headers",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for response: 409",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "500",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500",
        "kind": "response",
      },
      "value": Object {
        "description": "Internal Server Error: An error was encountered while attempting to process the request.",
        "statusCode": "500",
      },
    },
    "condition": "have all headers",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/version.md#versioning-response-headers",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for response: 500",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "application/json",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/requestBody/content/application~1json/schema/properties/id",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {},
        "key": "type",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "type",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "application/json",
          "type",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/requestBody/content/application~1json/schema/properties/type",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: type",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "type": "object",
        },
        "key": "attributes",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "attributes",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "application/json",
          "attributes",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/requestBody/content/application~1json/schema/properties/attributes",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: attributes",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "relationships",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "relationships",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "application/json",
          "relationships",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/requestBody/content/application~1json/schema/properties/relationships",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: relationships",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: jsonapi",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: version",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: errors",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: status",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: detail",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: code",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: title",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: source",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: pointer",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: parameter",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: meta",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: jsonapi",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: version",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: errors",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: status",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: detail",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: code",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: title",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: source",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: pointer",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: parameter",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: meta",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: jsonapi",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: version",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: errors",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: status",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: detail",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: code",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: title",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: source",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: pointer",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: parameter",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: meta",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: jsonapi",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: version",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: errors",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: status",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: detail",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: code",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: title",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: source",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: pointer",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: parameter",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: meta",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: jsonapi",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: version",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: errors",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: status",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: detail",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: code",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: title",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: source",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: pointer",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: parameter",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: meta",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: jsonapi",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: version",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: errors",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: status",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: detail",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: code",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: title",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: source",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: pointer",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: parameter",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
    },
    "condition": "have snake case keys",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: meta",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "application/json",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/requestBody/content/application~1json/schema/properties/id",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {},
        "key": "type",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "type",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "application/json",
          "type",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/requestBody/content/application~1json/schema/properties/type",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: type",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "type": "object",
        },
        "key": "attributes",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "attributes",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "application/json",
          "attributes",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/requestBody/content/application~1json/schema/properties/attributes",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: attributes",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "relationships",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "relationships",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "application/json",
          "relationships",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/requestBody/content/application~1json/schema/properties/relationships",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: relationships",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: jsonapi",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: version",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: errors",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: status",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: detail",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: code",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: title",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: source",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: pointer",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: parameter",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: meta",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: jsonapi",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: version",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: errors",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: status",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: detail",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: code",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: title",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: source",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: pointer",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: parameter",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: meta",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: jsonapi",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: version",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: errors",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: status",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: detail",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: code",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: title",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: source",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: pointer",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: parameter",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: meta",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: jsonapi",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: version",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: errors",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: status",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: detail",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: code",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: title",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: source",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: pointer",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: parameter",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: meta",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: jsonapi",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: version",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: errors",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: status",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: detail",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: code",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: title",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: source",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: pointer",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: parameter",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: meta",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: jsonapi",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: version",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: errors",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: status",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: detail",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: code",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: title",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: source",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: pointer",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: parameter",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
    },
    "condition": "not be required",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: meta",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "application/json",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/requestBody/content/application~1json/schema/properties/id",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {},
        "key": "type",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "type",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "application/json",
          "type",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/requestBody/content/application~1json/schema/properties/type",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: type",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "type": "object",
        },
        "key": "attributes",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "attributes",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "application/json",
          "attributes",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/requestBody/content/application~1json/schema/properties/attributes",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: attributes",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "relationships",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "relationships",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "application/json",
          "relationships",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/requestBody/content/application~1json/schema/properties/relationships",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: relationships",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: jsonapi",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: version",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: errors",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: status",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: detail",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: code",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: title",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: source",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: pointer",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: parameter",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: meta",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: jsonapi",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: version",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: errors",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: status",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: detail",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: code",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: title",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: source",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: pointer",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: parameter",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: meta",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: jsonapi",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: version",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: errors",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: status",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: detail",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: code",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: title",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: source",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: pointer",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: parameter",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: meta",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: jsonapi",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: version",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: errors",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: status",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: detail",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: code",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: title",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: source",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: pointer",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: parameter",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: meta",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: jsonapi",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: version",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: errors",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: status",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: detail",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: code",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: title",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: source",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: pointer",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: parameter",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: meta",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: jsonapi",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: version",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: errors",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: status",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: detail",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: code",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: title",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: source",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: pointer",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: parameter",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
    },
    "condition": "have enum or example",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: meta",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "application/json",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/requestBody/content/application~1json/schema/properties/id",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {},
        "key": "type",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "type",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "application/json",
          "type",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/requestBody/content/application~1json/schema/properties/type",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: type",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "type": "object",
        },
        "key": "attributes",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "attributes",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "application/json",
          "attributes",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/requestBody/content/application~1json/schema/properties/attributes",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: attributes",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "relationships",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "relationships",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "application/json",
          "relationships",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/requestBody/content/application~1json/schema/properties/relationships",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: relationships",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: jsonapi",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: version",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: errors",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: status",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: detail",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: code",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: title",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: source",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: pointer",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: parameter",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: meta",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: jsonapi",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: version",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: errors",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: status",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: detail",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: code",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: title",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: source",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: pointer",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: parameter",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: meta",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: jsonapi",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: version",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: errors",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: status",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: detail",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: code",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: title",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: source",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: pointer",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: parameter",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: meta",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: jsonapi",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: version",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: errors",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: status",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: detail",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: code",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: title",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: source",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: pointer",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: parameter",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: meta",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: jsonapi",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: version",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: errors",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: status",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: detail",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: code",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: title",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: source",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: pointer",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: parameter",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: meta",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: jsonapi",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: version",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: errors",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: status",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: detail",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: code",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: title",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: source",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: pointer",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: parameter",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
    },
    "condition": "use date-time for dates",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#formats",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "application/json",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/requestBody/content/application~1json/schema/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "type",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "application/json",
          "type",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/requestBody/content/application~1json/schema/properties/type",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {},
        "key": "type",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: type",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "attributes",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "application/json",
          "attributes",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/requestBody/content/application~1json/schema/properties/attributes",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "type": "object",
        },
        "key": "attributes",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: attributes",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "relationships",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "application/json",
          "relationships",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/requestBody/content/application~1json/schema/properties/relationships",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "relationships",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: relationships",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: code",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: title",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: code",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: title",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: code",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: title",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: code",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: title",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: code",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: title",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: meta",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: jsonapi",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: version",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: errors",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: id",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: status",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: detail",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: code",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: title",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: source",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: pointer",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: parameter",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
      "value": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
    },
    "condition": "have type for array items",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "requirement for field: meta",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "application/json",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/requestBody/content/application~1json/schema/properties/id",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {},
        "key": "type",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "type",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "application/json",
          "type",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/requestBody/content/application~1json/schema/properties/type",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: type",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "type": "object",
        },
        "key": "attributes",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "attributes",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "application/json",
          "attributes",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/requestBody/content/application~1json/schema/properties/attributes",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: attributes",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "relationships",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "relationships",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "application/json",
          "relationships",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/requestBody/content/application~1json/schema/properties/relationships",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: relationships",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: jsonapi",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: version",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: errors",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: status",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: detail",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: code",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: title",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: source",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: pointer",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: parameter",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: meta",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: jsonapi",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: version",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: errors",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: status",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: detail",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: code",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: title",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: source",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: pointer",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: parameter",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: meta",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: jsonapi",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: version",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: errors",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: status",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: detail",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: code",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: title",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: source",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: pointer",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: parameter",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: meta",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: jsonapi",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: version",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: errors",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: status",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: detail",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: code",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: title",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: source",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: pointer",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: parameter",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: meta",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: jsonapi",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: version",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: errors",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: status",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: detail",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: code",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: title",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: source",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: pointer",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: parameter",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: meta",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: jsonapi",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: version",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: errors",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: status",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: detail",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: code",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: title",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: source",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: pointer",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: parameter",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
    },
    "condition": "have 'items'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/array.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: meta",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "application/json",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/requestBody/content/application~1json/schema/properties/id",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {},
        "key": "type",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "type",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "application/json",
          "type",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/requestBody/content/application~1json/schema/properties/type",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: type",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "type": "object",
        },
        "key": "attributes",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "attributes",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "application/json",
          "attributes",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/requestBody/content/application~1json/schema/properties/attributes",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: attributes",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "type": "object",
        },
        "key": "relationships",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "body": Object {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": Array [
            "relationships",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "application/json",
          "relationships",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/requestBody/content/application~1json/schema/properties/relationships",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: relationships",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: jsonapi",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: version",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: errors",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: status",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: detail",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: code",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: title",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: source",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: pointer",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: parameter",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "400",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: meta",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: jsonapi",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: version",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: errors",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: status",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: detail",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: code",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: title",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: source",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: pointer",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: parameter",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "401",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: meta",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: jsonapi",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: version",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: errors",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: status",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: detail",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: code",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: title",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: source",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: pointer",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: parameter",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "403",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: meta",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: jsonapi",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: version",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: errors",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: status",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: detail",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: code",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: title",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: source",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: pointer",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: parameter",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "404",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: meta",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: jsonapi",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: version",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: errors",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: status",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: detail",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: code",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: title",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: source",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: pointer",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: parameter",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "409",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: meta",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "version": "1.0",
          },
          "type": "object",
        },
        "key": "jsonapi",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: jsonapi",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "Version of the JSON API specification this server supports.",
          "example": "1.0",
          "pattern": "^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)$",
          "type": "string",
        },
        "key": "version",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "jsonapi",
            "version",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "jsonapi",
          "version",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/jsonapi/properties/version",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: version",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "example": Array [
            Object {
              "detail": "Permission denied for this resource",
              "status": "403",
            },
          ],
          "minItems": 1,
          "type": "array",
        },
        "key": "errors",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: errors",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A unique identifier for this particular occurrence of the problem.",
          "example": "f16c31b5-6129-4571-add8-d589da9be524",
          "format": "uuid",
          "type": "string",
        },
        "key": "id",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "id",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "id",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/id",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: id",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "The HTTP status code applicable to this problem, expressed as a string value.",
          "example": "400",
          "pattern": "^[45]\\\\d\\\\d$",
          "type": "string",
        },
        "key": "status",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "status",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "status",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/status",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: status",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A human-readable explanation specific to this occurrence of the problem.",
          "example": "The request was missing these required fields: ...",
          "type": "string",
        },
        "key": "detail",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "detail",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "detail",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/detail",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: detail",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "An application-specific error code, expressed as a string value.",
          "example": "entity-not-found",
          "type": "string",
        },
        "key": "code",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "code",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "code",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/code",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: code",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "example": "Bad request",
          "type": "string",
        },
        "key": "title",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "title",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "title",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/title",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: title",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": false,
          "example": Object {
            "pointer": "/data/attributes",
          },
          "type": "object",
        },
        "key": "source",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: source",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A JSON Pointer [RFC6901] to the associated entity in the request document.",
          "example": "/data/attributes",
          "type": "string",
        },
        "key": "pointer",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "pointer",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "pointer",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/pointer",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: pointer",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "description": "A string indicating which URI query parameter caused the error.",
          "example": "param1",
          "type": "string",
        },
        "key": "parameter",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "source",
            "parameter",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "source",
          "parameter",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/source/properties/parameter",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: parameter",
  },
  Object {
    "change": Object {
      "added": Object {
        "flatSchema": Object {
          "additionalProperties": true,
          "example": Object {
            "key": "value",
          },
          "type": "object",
        },
        "key": "meta",
        "required": false,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "body": Object {
              "contentType": "application/vnd.api+json",
            },
            "statusCode": "500",
          },
          "jsonSchemaTrail": Array [
            "errors",
            "items",
            "meta",
          ],
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
          "application/vnd.api+json",
          "errors",
          "items",
          "meta",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500/content/application~1vnd.api+json/schema/properties/errors/items/properties/meta",
        "kind": "field",
      },
    },
    "condition": "have 'properties'",
    "docsLink": "https://json-schema.org/understanding-json-schema/reference/object.html",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added field: meta",
  },
  Object {
    "change": Object {
      "changed": Object {
        "after": "wip",
        "before": "wip",
      },
      "location": Object {
        "conceptualLocation": Object {
          "method": "",
          "path": "Resource Document",
        },
        "conceptualPath": Array [
          "x-snyk-api-stability",
        ],
        "jsonPath": "/x-snyk-api-stability",
        "kind": "SnykStability",
      },
    },
    "condition": "be provided for every resource document",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/version.md#stability-levels",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "published stability: ",
  },
  Object {
    "change": Object {
      "changed": Object {
        "after": "wip",
        "before": "wip",
      },
      "location": Object {
        "conceptualLocation": Object {
          "method": "",
          "path": "Resource Document",
        },
        "conceptualPath": Array [
          "x-snyk-api-stability",
        ],
        "jsonPath": "/x-snyk-api-stability",
        "kind": "SnykStability",
      },
    },
    "condition": "not change unless it was wip",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/version.md#promoting-stability-of-a-resource-over-time",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "published stability: ",
  },
  Object {
    "change": Object {
      "added": Object {
        "changeDate": "2021-11-11",
        "changeResource": "user",
        "changeVersion": Object {
          "date": "2021-11-10",
          "stability": "beta",
        },
        "resourceVersions": Object {},
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "",
          "path": "Entire Resource",
        },
        "conceptualPath": Array [],
        "jsonPath": "/",
        "kind": "ContextRule",
      },
    },
    "condition": "follow sunset rules",
    "docsLink": undefined,
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "api lifeycle: ",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "",
          "path": "This Specification",
        },
        "conceptualPath": Array [],
        "jsonPath": "/",
        "kind": "API",
      },
    },
    "condition": "use pascal case for component names",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#referenced-entities",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "this specification: ",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "",
          "path": "This Specification",
        },
        "conceptualPath": Array [],
        "jsonPath": "/",
        "kind": "API",
      },
    },
    "condition": "list the available versioned OpenAPI specifications",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#making-the-openapi-specification-available",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "this specification: ",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "",
          "path": "This Specification",
        },
        "conceptualPath": Array [],
        "jsonPath": "/",
        "kind": "API",
      },
    },
    "condition": "provide versioned OpenAPI specifications",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#making-the-openapi-specification-available",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "this specification: ",
  },
  Object {
    "change": Object {
      "location": Object {
        "conceptualLocation": Object {
          "method": "",
          "path": "This Specification",
        },
        "conceptualPath": Array [],
        "jsonPath": "/",
        "kind": "API",
      },
    },
    "condition": "have name and description for tags",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#tags",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "this specification: ",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Created user successfully",
        "statusCode": "201",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "201",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "201",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/201",
        "kind": "response",
      },
    },
    "condition": "support the correct 4xx status codes",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#status-codes",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 201",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Bad Request: A parameter provided as a part of the request was invalid.",
        "statusCode": "400",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "400",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400",
        "kind": "response",
      },
    },
    "condition": "support the correct 4xx status codes",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#status-codes",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 400",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": "401",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "401",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401",
        "kind": "response",
      },
    },
    "condition": "support the correct 4xx status codes",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#status-codes",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 401",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": "403",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "403",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403",
        "kind": "response",
      },
    },
    "condition": "support the correct 4xx status codes",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#status-codes",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 403",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Not Found: The resource being operated on could not be found.",
        "statusCode": "404",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "404",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404",
        "kind": "response",
      },
    },
    "condition": "support the correct 4xx status codes",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#status-codes",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 404",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Conflict: The requested operation conflicts with the current state of the resource in some way.",
        "statusCode": "409",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "409",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409",
        "kind": "response",
      },
    },
    "condition": "support the correct 4xx status codes",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#status-codes",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 409",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Internal Server Error: An error was encountered while attempting to process the request.",
        "statusCode": "500",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "500",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500",
        "kind": "response",
      },
    },
    "condition": "support the correct 4xx status codes",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#status-codes",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 500",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Created user successfully",
        "statusCode": "201",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "201",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "201",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/201",
        "kind": "response",
      },
    },
    "condition": "support the correct 2xx status codes for DELETE",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#status-codes",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 201",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Bad Request: A parameter provided as a part of the request was invalid.",
        "statusCode": "400",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "400",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400",
        "kind": "response",
      },
    },
    "condition": "support the correct 2xx status codes for DELETE",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#status-codes",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 400",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": "401",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "401",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401",
        "kind": "response",
      },
    },
    "condition": "support the correct 2xx status codes for DELETE",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#status-codes",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 401",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": "403",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "403",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403",
        "kind": "response",
      },
    },
    "condition": "support the correct 2xx status codes for DELETE",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#status-codes",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 403",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Not Found: The resource being operated on could not be found.",
        "statusCode": "404",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "404",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404",
        "kind": "response",
      },
    },
    "condition": "support the correct 2xx status codes for DELETE",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#status-codes",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 404",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Conflict: The requested operation conflicts with the current state of the resource in some way.",
        "statusCode": "409",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "409",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409",
        "kind": "response",
      },
    },
    "condition": "support the correct 2xx status codes for DELETE",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#status-codes",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 409",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Internal Server Error: An error was encountered while attempting to process the request.",
        "statusCode": "500",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "500",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500",
        "kind": "response",
      },
    },
    "condition": "support the correct 2xx status codes for DELETE",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#status-codes",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 500",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Created user successfully",
        "statusCode": "201",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "201",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "201",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/201",
        "kind": "response",
      },
    },
    "condition": "support the correct 2xx status codes for POST",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#status-codes",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 201",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Bad Request: A parameter provided as a part of the request was invalid.",
        "statusCode": "400",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "400",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400",
        "kind": "response",
      },
    },
    "condition": "support the correct 2xx status codes for POST",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#status-codes",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 400",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": "401",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "401",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401",
        "kind": "response",
      },
    },
    "condition": "support the correct 2xx status codes for POST",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#status-codes",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 401",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": "403",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "403",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403",
        "kind": "response",
      },
    },
    "condition": "support the correct 2xx status codes for POST",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#status-codes",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 403",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Not Found: The resource being operated on could not be found.",
        "statusCode": "404",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "404",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404",
        "kind": "response",
      },
    },
    "condition": "support the correct 2xx status codes for POST",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#status-codes",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 404",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Conflict: The requested operation conflicts with the current state of the resource in some way.",
        "statusCode": "409",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "409",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409",
        "kind": "response",
      },
    },
    "condition": "support the correct 2xx status codes for POST",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#status-codes",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 409",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Internal Server Error: An error was encountered while attempting to process the request.",
        "statusCode": "500",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "500",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500",
        "kind": "response",
      },
    },
    "condition": "support the correct 2xx status codes for POST",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#status-codes",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 500",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Created user successfully",
        "statusCode": "201",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "201",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "201",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/201",
        "kind": "response",
      },
    },
    "condition": "use the JSON:API content type",
    "docsLink": "https://jsonapi.org/format/#content-negotiation-clients",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 201",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Bad Request: A parameter provided as a part of the request was invalid.",
        "statusCode": "400",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "400",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400",
        "kind": "response",
      },
    },
    "condition": "use the JSON:API content type",
    "docsLink": "https://jsonapi.org/format/#content-negotiation-clients",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 400",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": "401",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "401",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401",
        "kind": "response",
      },
    },
    "condition": "use the JSON:API content type",
    "docsLink": "https://jsonapi.org/format/#content-negotiation-clients",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 401",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": "403",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "403",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403",
        "kind": "response",
      },
    },
    "condition": "use the JSON:API content type",
    "docsLink": "https://jsonapi.org/format/#content-negotiation-clients",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 403",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Not Found: The resource being operated on could not be found.",
        "statusCode": "404",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "404",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404",
        "kind": "response",
      },
    },
    "condition": "use the JSON:API content type",
    "docsLink": "https://jsonapi.org/format/#content-negotiation-clients",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 404",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Conflict: The requested operation conflicts with the current state of the resource in some way.",
        "statusCode": "409",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "409",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409",
        "kind": "response",
      },
    },
    "condition": "use the JSON:API content type",
    "docsLink": "https://jsonapi.org/format/#content-negotiation-clients",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 409",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Internal Server Error: An error was encountered while attempting to process the request.",
        "statusCode": "500",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "500",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500",
        "kind": "response",
      },
    },
    "condition": "use the JSON:API content type",
    "docsLink": "https://jsonapi.org/format/#content-negotiation-clients",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 500",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Created user successfully",
        "statusCode": "201",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "201",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "201",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/201",
        "kind": "response",
      },
    },
    "condition": "use the correct JSON:API response data for PATCH",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 201",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Bad Request: A parameter provided as a part of the request was invalid.",
        "statusCode": "400",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "400",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400",
        "kind": "response",
      },
    },
    "condition": "use the correct JSON:API response data for PATCH",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 400",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": "401",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "401",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401",
        "kind": "response",
      },
    },
    "condition": "use the correct JSON:API response data for PATCH",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 401",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": "403",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "403",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403",
        "kind": "response",
      },
    },
    "condition": "use the correct JSON:API response data for PATCH",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 403",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Not Found: The resource being operated on could not be found.",
        "statusCode": "404",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "404",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404",
        "kind": "response",
      },
    },
    "condition": "use the correct JSON:API response data for PATCH",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 404",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Conflict: The requested operation conflicts with the current state of the resource in some way.",
        "statusCode": "409",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "409",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409",
        "kind": "response",
      },
    },
    "condition": "use the correct JSON:API response data for PATCH",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 409",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Internal Server Error: An error was encountered while attempting to process the request.",
        "statusCode": "500",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "500",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500",
        "kind": "response",
      },
    },
    "condition": "use the correct JSON:API response data for PATCH",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 500",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Created user successfully",
        "statusCode": "201",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "201",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "201",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/201",
        "kind": "response",
      },
    },
    "condition": "not include content for 204 status codes",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 201",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Bad Request: A parameter provided as a part of the request was invalid.",
        "statusCode": "400",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "400",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400",
        "kind": "response",
      },
    },
    "condition": "not include content for 204 status codes",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 400",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": "401",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "401",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401",
        "kind": "response",
      },
    },
    "condition": "not include content for 204 status codes",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 401",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": "403",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "403",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403",
        "kind": "response",
      },
    },
    "condition": "not include content for 204 status codes",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 403",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Not Found: The resource being operated on could not be found.",
        "statusCode": "404",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "404",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404",
        "kind": "response",
      },
    },
    "condition": "not include content for 204 status codes",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 404",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Conflict: The requested operation conflicts with the current state of the resource in some way.",
        "statusCode": "409",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "409",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409",
        "kind": "response",
      },
    },
    "condition": "not include content for 204 status codes",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 409",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Internal Server Error: An error was encountered while attempting to process the request.",
        "statusCode": "500",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "500",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500",
        "kind": "response",
      },
    },
    "condition": "not include content for 204 status codes",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 500",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Created user successfully",
        "statusCode": "201",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "201",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "201",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/201",
        "kind": "response",
      },
    },
    "condition": "include content for 2xx status codes other than 204",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 201",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Bad Request: A parameter provided as a part of the request was invalid.",
        "statusCode": "400",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "400",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400",
        "kind": "response",
      },
    },
    "condition": "include content for 2xx status codes other than 204",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 400",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": "401",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "401",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401",
        "kind": "response",
      },
    },
    "condition": "include content for 2xx status codes other than 204",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 401",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": "403",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "403",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403",
        "kind": "response",
      },
    },
    "condition": "include content for 2xx status codes other than 204",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 403",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Not Found: The resource being operated on could not be found.",
        "statusCode": "404",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "404",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404",
        "kind": "response",
      },
    },
    "condition": "include content for 2xx status codes other than 204",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 404",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Conflict: The requested operation conflicts with the current state of the resource in some way.",
        "statusCode": "409",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "409",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409",
        "kind": "response",
      },
    },
    "condition": "include content for 2xx status codes other than 204",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 409",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Internal Server Error: An error was encountered while attempting to process the request.",
        "statusCode": "500",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "500",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500",
        "kind": "response",
      },
    },
    "condition": "include content for 2xx status codes other than 204",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 500",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Created user successfully",
        "statusCode": "201",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "201",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "201",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/201",
        "kind": "response",
      },
    },
    "condition": "include a JSON:API data property for 2xx status codes",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 201",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Bad Request: A parameter provided as a part of the request was invalid.",
        "statusCode": "400",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "400",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400",
        "kind": "response",
      },
    },
    "condition": "include a JSON:API data property for 2xx status codes",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 400",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": "401",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "401",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401",
        "kind": "response",
      },
    },
    "condition": "include a JSON:API data property for 2xx status codes",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 401",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": "403",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "403",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403",
        "kind": "response",
      },
    },
    "condition": "include a JSON:API data property for 2xx status codes",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 403",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Not Found: The resource being operated on could not be found.",
        "statusCode": "404",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "404",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404",
        "kind": "response",
      },
    },
    "condition": "include a JSON:API data property for 2xx status codes",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 404",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Conflict: The requested operation conflicts with the current state of the resource in some way.",
        "statusCode": "409",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "409",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409",
        "kind": "response",
      },
    },
    "condition": "include a JSON:API data property for 2xx status codes",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 409",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Internal Server Error: An error was encountered while attempting to process the request.",
        "statusCode": "500",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "500",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500",
        "kind": "response",
      },
    },
    "condition": "include a JSON:API data property for 2xx status codes",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 500",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Created user successfully",
        "statusCode": "201",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "201",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "201",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/201",
        "kind": "response",
      },
    },
    "condition": "include a JSON:API type property for 2xx status codes",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 201",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Bad Request: A parameter provided as a part of the request was invalid.",
        "statusCode": "400",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "400",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400",
        "kind": "response",
      },
    },
    "condition": "include a JSON:API type property for 2xx status codes",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 400",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": "401",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "401",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401",
        "kind": "response",
      },
    },
    "condition": "include a JSON:API type property for 2xx status codes",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 401",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": "403",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "403",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403",
        "kind": "response",
      },
    },
    "condition": "include a JSON:API type property for 2xx status codes",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 403",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Not Found: The resource being operated on could not be found.",
        "statusCode": "404",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "404",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404",
        "kind": "response",
      },
    },
    "condition": "include a JSON:API type property for 2xx status codes",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 404",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Conflict: The requested operation conflicts with the current state of the resource in some way.",
        "statusCode": "409",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "409",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409",
        "kind": "response",
      },
    },
    "condition": "include a JSON:API type property for 2xx status codes",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 409",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Internal Server Error: An error was encountered while attempting to process the request.",
        "statusCode": "500",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "500",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500",
        "kind": "response",
      },
    },
    "condition": "include a JSON:API type property for 2xx status codes",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 500",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Created user successfully",
        "statusCode": "201",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "201",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "201",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/201",
        "kind": "response",
      },
    },
    "condition": "include a location header",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 201",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Bad Request: A parameter provided as a part of the request was invalid.",
        "statusCode": "400",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "400",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400",
        "kind": "response",
      },
    },
    "condition": "include a location header",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 400",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": "401",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "401",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401",
        "kind": "response",
      },
    },
    "condition": "include a location header",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 401",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": "403",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "403",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403",
        "kind": "response",
      },
    },
    "condition": "include a location header",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 403",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Not Found: The resource being operated on could not be found.",
        "statusCode": "404",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "404",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404",
        "kind": "response",
      },
    },
    "condition": "include a location header",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 404",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Conflict: The requested operation conflicts with the current state of the resource in some way.",
        "statusCode": "409",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "409",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409",
        "kind": "response",
      },
    },
    "condition": "include a location header",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 409",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Internal Server Error: An error was encountered while attempting to process the request.",
        "statusCode": "500",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "500",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500",
        "kind": "response",
      },
    },
    "condition": "include a location header",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 500",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Created user successfully",
        "statusCode": "201",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "201",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "201",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/201",
        "kind": "response",
      },
    },
    "condition": "include self links",
    "docsLink": "https://jsonapi.org/format/#document-resource-object-links",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 201",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Bad Request: A parameter provided as a part of the request was invalid.",
        "statusCode": "400",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "400",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400",
        "kind": "response",
      },
    },
    "condition": "include self links",
    "docsLink": "https://jsonapi.org/format/#document-resource-object-links",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 400",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": "401",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "401",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401",
        "kind": "response",
      },
    },
    "condition": "include self links",
    "docsLink": "https://jsonapi.org/format/#document-resource-object-links",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 401",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": "403",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "403",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403",
        "kind": "response",
      },
    },
    "condition": "include self links",
    "docsLink": "https://jsonapi.org/format/#document-resource-object-links",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 403",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Not Found: The resource being operated on could not be found.",
        "statusCode": "404",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "404",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404",
        "kind": "response",
      },
    },
    "condition": "include self links",
    "docsLink": "https://jsonapi.org/format/#document-resource-object-links",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 404",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Conflict: The requested operation conflicts with the current state of the resource in some way.",
        "statusCode": "409",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "409",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409",
        "kind": "response",
      },
    },
    "condition": "include self links",
    "docsLink": "https://jsonapi.org/format/#document-resource-object-links",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 409",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Internal Server Error: An error was encountered while attempting to process the request.",
        "statusCode": "500",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "500",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500",
        "kind": "response",
      },
    },
    "condition": "include self links",
    "docsLink": "https://jsonapi.org/format/#document-resource-object-links",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 500",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Create a new user",
        "method": "post",
        "operationId": "createUser",
        "pathPattern": "/orgs/{org_id}/users/{user_id}",
        "summary": "Create a new user",
        "tags": Array [
          "User",
        ],
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post",
        "kind": "operation",
      },
    },
    "condition": "correctly support pagination parameters",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/jsonapi.md#pagination-parameters",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added operation: POST /orgs/{org_id}/users/{user_id}",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Create a new user",
        "method": "post",
        "operationId": "createUser",
        "pathPattern": "/orgs/{org_id}/users/{user_id}",
        "summary": "Create a new user",
        "tags": Array [
          "User",
        ],
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post",
        "kind": "operation",
      },
    },
    "condition": "not use pagination parameters for non-GET operations",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/jsonapi.md#pagination-parameters",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added operation: POST /orgs/{org_id}/users/{user_id}",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Create a new user",
        "method": "post",
        "operationId": "createUser",
        "pathPattern": "/orgs/{org_id}/users/{user_id}",
        "summary": "Create a new user",
        "tags": Array [
          "User",
        ],
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post",
        "kind": "operation",
      },
    },
    "condition": "correctly support pagination links",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/jsonapi.md#pagination-parameters",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added operation: POST /orgs/{org_id}/users/{user_id}",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Created user successfully",
        "statusCode": "201",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "201",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "201",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/201",
        "kind": "response",
      },
    },
    "condition": "not support compound documents",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/jsonapi.md#compound-documents",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 201",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Bad Request: A parameter provided as a part of the request was invalid.",
        "statusCode": "400",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "400",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400",
        "kind": "response",
      },
    },
    "condition": "not support compound documents",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/jsonapi.md#compound-documents",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 400",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": "401",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "401",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401",
        "kind": "response",
      },
    },
    "condition": "not support compound documents",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/jsonapi.md#compound-documents",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 401",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": "403",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "403",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403",
        "kind": "response",
      },
    },
    "condition": "not support compound documents",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/jsonapi.md#compound-documents",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 403",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Not Found: The resource being operated on could not be found.",
        "statusCode": "404",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "404",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404",
        "kind": "response",
      },
    },
    "condition": "not support compound documents",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/jsonapi.md#compound-documents",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 404",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Conflict: The requested operation conflicts with the current state of the resource in some way.",
        "statusCode": "409",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "409",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409",
        "kind": "response",
      },
    },
    "condition": "not support compound documents",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/jsonapi.md#compound-documents",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 409",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Internal Server Error: An error was encountered while attempting to process the request.",
        "statusCode": "500",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "500",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500",
        "kind": "response",
      },
    },
    "condition": "not support compound documents",
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/jsonapi.md#compound-documents",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 500",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Created user successfully",
        "statusCode": "201",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "201",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "201",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/201",
        "kind": "response",
      },
    },
    "condition": "have valid JSON:API schemas for GET/POST response data",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 201",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Bad Request: A parameter provided as a part of the request was invalid.",
        "statusCode": "400",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "400",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400",
        "kind": "response",
      },
    },
    "condition": "have valid JSON:API schemas for GET/POST response data",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 400",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": "401",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "401",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401",
        "kind": "response",
      },
    },
    "condition": "have valid JSON:API schemas for GET/POST response data",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 401",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": "403",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "403",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403",
        "kind": "response",
      },
    },
    "condition": "have valid JSON:API schemas for GET/POST response data",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 403",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Not Found: The resource being operated on could not be found.",
        "statusCode": "404",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "404",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404",
        "kind": "response",
      },
    },
    "condition": "have valid JSON:API schemas for GET/POST response data",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 404",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Conflict: The requested operation conflicts with the current state of the resource in some way.",
        "statusCode": "409",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "409",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409",
        "kind": "response",
      },
    },
    "condition": "have valid JSON:API schemas for GET/POST response data",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 409",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Internal Server Error: An error was encountered while attempting to process the request.",
        "statusCode": "500",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "500",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500",
        "kind": "response",
      },
    },
    "condition": "have valid JSON:API schemas for GET/POST response data",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 500",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Created user successfully",
        "statusCode": "201",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "201",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "201",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/201",
        "kind": "response",
      },
    },
    "condition": "have valid JSON:API schemas for PATCH response data",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 201",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Bad Request: A parameter provided as a part of the request was invalid.",
        "statusCode": "400",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "400",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400",
        "kind": "response",
      },
    },
    "condition": "have valid JSON:API schemas for PATCH response data",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 400",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": "401",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "401",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401",
        "kind": "response",
      },
    },
    "condition": "have valid JSON:API schemas for PATCH response data",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 401",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": "403",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "403",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403",
        "kind": "response",
      },
    },
    "condition": "have valid JSON:API schemas for PATCH response data",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 403",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Not Found: The resource being operated on could not be found.",
        "statusCode": "404",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "404",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404",
        "kind": "response",
      },
    },
    "condition": "have valid JSON:API schemas for PATCH response data",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 404",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Conflict: The requested operation conflicts with the current state of the resource in some way.",
        "statusCode": "409",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "409",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409",
        "kind": "response",
      },
    },
    "condition": "have valid JSON:API schemas for PATCH response data",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 409",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Internal Server Error: An error was encountered while attempting to process the request.",
        "statusCode": "500",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "500",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500",
        "kind": "response",
      },
    },
    "condition": "have valid JSON:API schemas for PATCH response data",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 500",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Created user successfully",
        "statusCode": "201",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "201",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "201",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/201",
        "kind": "response",
      },
    },
    "condition": "have valid JSON:API schemas for DELETE response data",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 201",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Bad Request: A parameter provided as a part of the request was invalid.",
        "statusCode": "400",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "400",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "400",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/400",
        "kind": "response",
      },
    },
    "condition": "have valid JSON:API schemas for DELETE response data",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 400",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": "401",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "401",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "401",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/401",
        "kind": "response",
      },
    },
    "condition": "have valid JSON:API schemas for DELETE response data",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 401",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Unauthorized: the request requires an authentication token or a token with more permissions.",
        "statusCode": "403",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "403",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "403",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/403",
        "kind": "response",
      },
    },
    "condition": "have valid JSON:API schemas for DELETE response data",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 403",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Not Found: The resource being operated on could not be found.",
        "statusCode": "404",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "404",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "404",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/404",
        "kind": "response",
      },
    },
    "condition": "have valid JSON:API schemas for DELETE response data",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 404",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Conflict: The requested operation conflicts with the current state of the resource in some way.",
        "statusCode": "409",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "409",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "409",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/409",
        "kind": "response",
      },
    },
    "condition": "have valid JSON:API schemas for DELETE response data",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 409",
  },
  Object {
    "change": Object {
      "added": Object {
        "description": "Internal Server Error: An error was encountered while attempting to process the request.",
        "statusCode": "500",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "500",
          },
          "method": "post",
          "path": "/orgs/{org_id}/users/{user_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/users/{}",
          "post",
          "responses",
          "500",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1users~1{user_id}/post/responses/500",
        "kind": "response",
      },
    },
    "condition": "have valid JSON:API schemas for DELETE response data",
    "docsLink": "https://jsonapi.org/format/#document-resource-objects",
    "effectiveOnDate": undefined,
    "isMust": true,
    "isShould": false,
    "passed": true,
    "where": "added response: 500",
  },
]
`;
